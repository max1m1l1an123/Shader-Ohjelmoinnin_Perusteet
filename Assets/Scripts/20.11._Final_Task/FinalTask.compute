// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    // TODO: insert actual code here!

    Result[id.xy] = float4(id.x & id.y, (id.x & 15)/15.0, (id.y & 15)/15.0, 0.0);
}

// vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
// Compute Shaderin tulisi sisältää kaksi kerneliä Update1 ja Update2, jotka päivittävät simulaatiota vuorotellen
#pragma kernel Update1
[numthreads(8, 8, 1)]
void Update1(uint3 id : SV_DispatchThreadID)
{
    
}
#pragma kernel Update2
[numthreads(8, 8, 1)]
void Update2(uint3 id : SV_DispatchThreadID)
{
    
}
// Compute Shaderin tulisi sisältää kaksi kerneliä Update1 ja Update2, jotka päivittävät simulaatiota vuorotellen
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

// vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
// Shaderin tulisi sisältää kernel jokaiselle seedille jota scriptissä voi valita aloitukseen.
#pragma kernel KernelForEverySeed
[numthreads(8, 8, 1)]
void KernelForEverySeed(uint3 id : SV_DispatchThreadID)
{
    
}
// Shaderin tulisi sisältää kernel jokaiselle seedille jota scriptissä voi valita aloitukseen.
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

// vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
// Shaderin tulisi sisältää funktio Game of Lifen solun päivitykselle.
void UpdateGameOfLife()
{
    
}
// Shaderin tulisi sisältää funktio Game of Lifen solun päivitykselle.
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
RWTexture2D<float4> State1;
RWTexture2D<float4> State2;

Texture2D<float4> _BaseMap; // texture

cbuffer ColorBuffer : register(b0)
{
    float4 CellColour;
    float4 TextureSize;
}

bool Simulator(float4 cell, uint2 texCoord, RWTexture2D<float4> State);
bool IsCellAlive(float4 cell);

#pragma kernel Update1
[numthreads(8,8,1)]
void Update1(uint3 id : SV_DispatchThreadID)
{
    uint2 texCoord = id.xy;
    float4 cell = State1.Load(texCoord);
    bool nextState = Simulator(cell, texCoord, State1);
    State2[texCoord] = nextState ? CellColour : float4(0,0,0,1);
    
}

#pragma kernel Update2
[numthreads(8,8,1)]
void Update2(uint3 id : SV_DispatchThreadID)
{
    uint2 texCoord = id.xy;
    float4 cell = State1.Load(texCoord);
    bool nextState = Simulator(cell, texCoord, State1);
    State2[texCoord] = nextState ? CellColour : float4(0,0,0,1);
}

int heightWidth = 512;


bool Simulator(float4 cell, uint2 texCoord, RWTexture2D<float4> State)
{
    bool isAlive = false;

    
    int live = 0;
    // live += IsCellAlive(State.Load());

    if (live < 2) // 1. Fewer than 2 live neighbours --> die
        {
        isAlive = false;
        }
    else if (live < 4 && IsCellAlive(cell) == true) // 2. 2 or 3 live neighbours -> live on
        {
        isAlive = true;
        }
    else if (live > 3 && IsCellAlive(cell) == true) // 3. more than 3 live neighbours -> die
        {
        isAlive = false;
        }
    else if (live == 3 && IsCellAlive(cell) == false) // 4. dead cell with 3 live neighbours -> rebirth
        {
        isAlive = true;
        }
    
    return isAlive;
}



bool IsCellAlive(float4 cell)
{
    return cell.x + cell.y + cell.z + cell.w > 0;
}

bool IsCellAlive(float3 cell)
{
    return cell.x + cell.y + cell.z > 0;
}

#pragma kernel InitFullTexture
[numthreads(8, 8, 1)]
void InitFullTexture(uint3 id : SV_DispatchThreadID)
{
    if (id.x % 7 == 0 || id.y % 3 == 0)
    {
        State1[id.xy] = CellColour;
    }
}

#pragma kernel InitRPentomino
[numthreads(8, 8, 1)]
void InitRPentomino(uint3 id : SV_DispatchThreadID)
{
    if (id.x == 256 && id.y == 256)
        State1[id.xy] = CellColour;
    if (id.x == 255 && id.y == 256)
        State1[id.xy] = CellColour;
    if (id.x == 256 && id.y == 255)
        State1[id.xy] = CellColour;
    if (id.x == 257 && id.y == 255)
        State1[id.xy] = CellColour;
    if (id.x == 256 && id.y == 257)
        State1[id.xy] = CellColour;
}


#pragma kernel InitAcorn
[numthreads(8, 8, 1)]
void InitAcorn(uint3 id : SV_DispatchThreadID)
{
    if (id.x == 256 && id.y == 256)
        State1[id.xy] = CellColour;
    if (id.x == 257 && id.y == 257)
        State1[id.xy] = CellColour;
    if (id.x == 254 && id.y == 255)
        State1[id.xy] = CellColour;
    if (id.x == 258 && id.y == 257)
        State1[id.xy] = CellColour;
    if (id.x == 259 && id.y == 257)
        State1[id.xy] = CellColour;
    if (id.x == 254 && id.y == 257)
        State1[id.xy] = CellColour;
    if (id.x == 253 && id.y == 257)
        State1[id.xy] = CellColour;
}


#pragma kernel InitGun
[numthreads(8, 8, 1)]
void InitGun(uint3 id : SV_DispatchThreadID)
{
    if (id.x == 256 && id.y == 256)
        State1[id.xy] = CellColour;
    if (id.x == 255 && id.y == 255)
        State1[id.xy] = CellColour;
    if (id.x == 254 && id.y == 254)
        State1[id.xy] = CellColour;
    if (id.x == 255 && id.y == 256)
        State1[id.xy] = CellColour;
    if (id.x == 255 && id.y == 257)
        State1[id.xy] = CellColour;
    if (id.x == 254 && id.y == 258)
        State1[id.xy] = CellColour;
    if (id.x == 253 && id.y == 256)
        State1[id.xy] = CellColour;
    if (id.x == 252 && id.y == 259)
        State1[id.xy] = CellColour;
    if (id.x == 252 && id.y == 253)
        State1[id.xy] = CellColour;
    if (id.x == 251 && id.y == 259)
        State1[id.xy] = CellColour;
    if (id.x == 251 && id.y == 253)
        State1[id.xy] = CellColour;
    if (id.x == 250 && id.y == 258)
        State1[id.xy] = CellColour;
    if (id.x == 250 && id.y == 254)
        State1[id.xy] = CellColour;
    if (id.x == 249 && id.y == 256)
        State1[id.xy] = CellColour;
    if (id.x == 249 && id.y == 255)
        State1[id.xy] = CellColour;
    if (id.x == 249 && id.y == 257)
        State1[id.xy] = CellColour;
    if (id.x == 240 && id.y == 256)
        State1[id.xy] = CellColour;
    if (id.x == 240 && id.y == 255)
        State1[id.xy] = CellColour;
    if (id.x == 239 && id.y == 256)
        State1[id.xy] = CellColour;
    if (id.x == 239 && id.y == 255)
        State1[id.xy] = CellColour;
    if (id.x == 259 && id.y == 255)
        State1[id.xy] = CellColour;
    if (id.x == 259 && id.y == 254)
        State1[id.xy] = CellColour;
    if (id.x == 259 && id.y == 253)
        State1[id.xy] = CellColour;
    if (id.x == 260 && id.y == 255)
        State1[id.xy] = CellColour;
    if (id.x == 260 && id.y == 254)
        State1[id.xy] = CellColour;
    if (id.x == 260 && id.y == 253)
        State1[id.xy] = CellColour;
    if (id.x == 261 && id.y == 256)
        State1[id.xy] = CellColour;
    if (id.x == 261 && id.y == 252)
        State1[id.xy] = CellColour;
    if (id.x == 263 && id.y == 257)
        State1[id.xy] = CellColour;
    if (id.x == 263 && id.y == 256)
        State1[id.xy] = CellColour;
    if (id.x == 263 && id.y == 252)
        State1[id.xy] = CellColour;
    if (id.x == 263 && id.y == 251)
        State1[id.xy] = CellColour;
    if (id.x == 273 && id.y == 254)
        State1[id.xy] = CellColour;
    if (id.x == 273 && id.y == 253)
        State1[id.xy] = CellColour;
    if (id.x == 274 && id.y == 254)
        State1[id.xy] = CellColour;
    if (id.x == 274 && id.y == 253)
        State1[id.xy] = CellColour;
}